from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from database import add_task, mark_task_done, delete_task
from keyboards import get_main_keyboard
from database import get_tasks

class TaskState(StatesGroup):
    title = State()
    description = State()
    deadline = State()
    mark_done_awaiting_id = State()
    delete_task_awaiting_id = State()

async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def process_new_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.title)

async def get_task_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.description)

async def get_task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (YYYY-MM-DD):")
    await state.set_state(TaskState.deadline)

async def get_task_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    title, description, deadline = user_data["title"], user_data["description"], message.text

    try:
        deadline_date = datetime.strptime(deadline, "%Y-%m-%d").date()
        if deadline_date < datetime.now().date():
            await message.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! (YYYY-MM-DD)")
        return

    add_task(title, description, deadline)
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
    await state.clear()


async def list_tasks(message: types.Message):
    tasks = get_tasks()

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        task_id, title, description, deadline, status = task
        response += f"üÜî {task_id} | üìå {title}\nüìñ {description}\n‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline}\nüîπ –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(response)

async def complete_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
    await state.set_state(TaskState.mark_done_awaiting_id)

async def mark_task_done_handler(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        mark_task_done(task_id)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")
    await state.clear()

async def delete_task_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(TaskState.delete_task_awaiting_id)

async def confirm_delete_task(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        delete_task(task_id)
        await message.answer(f"üóë –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")
    await state.clear()