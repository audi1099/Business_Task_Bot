from datetime import datetime
from database import add_task, mark_task_done, delete_task
from keyboards import get_main_keyboard
from database import get_tasks
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import is_phone_number_authorized, add_user
from keyboards import get_main_keyboard

class UserState(StatesGroup):
    phone_number = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

class TaskState(StatesGroup):
    title = State()
    description = State()
    deadline = State()
    mark_done_awaiting_id = State()
    delete_task_awaiting_id = State()

class UserState(StatesGroup):
    phone_number = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


async def start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:")
    await state.set_state(UserState.phone_number)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

async def get_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    if is_phone_number_authorized(phone_number):
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É
        await message.answer(f"‚úÖ –ù–æ–º–µ—Ä {phone_number} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=get_main_keyboard())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        add_user(phone_number)
        await message.answer(f"‚ùå –ù–æ–º–µ—Ä {phone_number} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –û–Ω –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=get_main_keyboard())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    await UserState.phone_number.set()

async def get_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if is_phone_number_authorized(phone_number):
        await message.answer(f"‚úÖ –ù–æ–º–µ—Ä {phone_number} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=get_main_keyboard())
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        await list_tasks(message)  # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    else:
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def process_new_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.title)

async def get_task_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.description)

async def get_task_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (YYYY-MM-DD):")
    await state.set_state(TaskState.deadline)

async def get_task_deadline(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    title, description, deadline = user_data["title"], user_data["description"], message.text

    try:
        deadline_date = datetime.strptime(deadline, "%Y-%m-%d").date()
        if deadline_date < datetime.now().date():
            await message.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! (YYYY-MM-DD)")
        return

    add_task(title, description, deadline)
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
    await state.clear()


async def list_tasks(message: types.Message):
    tasks = get_tasks()

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for task in tasks:
        task_id, title, description, deadline, status = task
        response += f"üÜî {task_id} | üìå {title}\nüìñ {description}\n‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline}\nüîπ –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(response)

async def complete_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
    await state.set_state(TaskState.mark_done_awaiting_id)

async def mark_task_done_handler(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        mark_task_done(task_id)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")
    await state.clear()

async def delete_task_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(TaskState.delete_task_awaiting_id)

async def confirm_delete_task(message: types.Message, state: FSMContext):
    try:
        task_id = int(message.text)
        delete_task(task_id)
        await message.answer(f"üóë –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏.")
    await state.clear()